bp$DV_DBP.cat <- factor(bp$DV_DBP.cat, levels=c("DBP<=80", "80<DBP<90", "90<=DBP<100", "DBP>=100"))
# I don't think these factors should be ordered
bp$BlP_MthMsrBP.0 <- factor(bp$BlP_MthMsrBP.0, ordered=FALSE)
bp$BlP_MthMsrBP.1 <- factor(bp$BlP_MthMsrBP.1, ordered=FALSE)
# Indicator variable for hypertensive status at baseline assessment
bp$DV_MeasuredHTN <- (bp$DV_SBP.avg>=140 | bp$DV_DBP.avg>=90)
# Save the organised data
saveRDS(bp, file=outfile)
#--------------------------------------------------------------------------------------------------------------
# Jennifer Collister 27/03/2020
# Clean the UKB baseline & recruitment data
#--------------------------------------------------------------------------------------------------------------
# No libraries needed
#--------------------------------------------------------------------------------------------------------------
inpath <- readChar("./data/raw/filepath.txt", file.info("./data/raw/filepath.txt")$size)
outfile <- "./data/clean/basechar.rds"
#--------------------------------------------------------------------------------------------------------------
# Read in the raw data
base <- readRDS(paste0(inpath, "BaC.rds"))
rec <- readRDS(paste0(inpath, "Rec_base.rds"))
ethnicity <- readRDS(paste0(inpath, "Eth_base.rds"))
basechar <- merge(base, rec, by="ID", all=TRUE)
basechar <- merge(basechar, ethnicity, by="ID", all=TRUE)
# Estimate date of birth as the 15th of the month of birth
basechar$DV_DateOfBirth <- as.Date(paste0("15",basechar$BaC_BirthMonth, basechar$BaC_BirthYear), "%d%B%Y")
# Calculate age at recruitment
basechar$DV_AgeAtRec <- as.numeric(round(difftime(basechar$Rec_DateAssess, basechar$DV_DateOfBirth, unit="days")/365.25,2))
# I don't think these factors should be ordered
basechar$BaC_Sex <- factor(basechar$BaC_Sex, ordered=FALSE)
basechar$BaC_RsnLostFU <- factor(basechar$BaC_RsnLostFU, ordered=FALSE)
# Reorder the ethnicity factor levels to make more sense when tabulating
basechar$Eth_Ethnicity <- factor(ethnicity$Eth_Ethnicity, levels=c("White", "British", "Irish", "Any other white background",
"Mixed", "White and Black Caribbean", "White and Black African",
"White and Asian", "Any other mixed background",
"Asian or Asian British", "Indian", "Pakistani", "Bangladeshi",
"Any other Asian background",
"Black or Black British", "Caribbean", "African", "Any other Black background",
"Chinese", "Other ethnic group", "Do not know", "Prefer not to answer"))
saveRDS(basechar, file=outfile)
#--------------------------------------------------------------------------------------------------------------
# Alcohol
alcohol <- readRDS(paste0(inpath, "Alc_base.rds"))
#--------------------------------------------------------------------------------------------------------------
inpath <- readChar("./data/raw/filepath.txt", file.info("./data/raw/filepath.txt")$size)
outfile <- "./data/clean/covars.rds"
# Read in the raw data
#--------------------------------------------------------------------------------------------------------------
# Smoking
smoking <- readRDS(paste0(inpath, "Smo_base.rds"))
#--------------------------------------------------------------------------------------------------------------
# Jennifer Collister 27/03/2020
# Clean the UKB baseline & recruitment data
#--------------------------------------------------------------------------------------------------------------
# No libraries needed
#--------------------------------------------------------------------------------------------------------------
inpath <- readChar("./data/raw/filepath.txt", file.info("./data/raw/filepath.txt")$size)
outfile <- "./data/clean/basechar.rds"
#--------------------------------------------------------------------------------------------------------------
# Read in the raw data
base <- readRDS(paste0(inpath, "BaC.rds"))
rec <- readRDS(paste0(inpath, "Rec_base.rds"))
basechar <- merge(base, rec, by="ID", all=TRUE)
# Estimate date of birth as the 15th of the month of birth
basechar$DV_DateOfBirth <- as.Date(paste0("15",basechar$BaC_BirthMonth, basechar$BaC_BirthYear), "%d%B%Y")
# Calculate age at recruitment
basechar$DV_AgeAtRec <- as.numeric(round(difftime(basechar$Rec_DateAssess, basechar$DV_DateOfBirth, unit="days")/365.25,2))
# These factors shouldn't be ordered
basechar$BaC_Sex <- factor(basechar$BaC_Sex, ordered=FALSE)
basechar$BaC_RsnLostFU <- factor(basechar$BaC_RsnLostFU, ordered=FALSE)
saveRDS(basechar, file=outfile)
common <- list(source="ID",
mapper=id,
name="ID",
display_name="ID",
description="The unique participant identifier")
id <- function(x){x}
unorder <- function(x){factor(x, ordered=FALSE)}
ethnicity <- function(x){
factor(x, levels=c("White", "British", "Irish", "Any other white background",
"Mixed", "White and Black Caribbean", "White and Black African",
"White and Asian", "Any other mixed background",
"Asian or Asian British", "Indian", "Pakistani", "Bangladeshi",
"Any other Asian background",
"Black or Black British", "Caribbean", "African", "Any other Black background",
"Chinese", "Other ethnic group", "Do not know", "Prefer not to answer"))
}
common <- list(source="ID",
mapper=id,
name="ID",
display_name="ID",
description="The unique participant identifier")
common <- c(
list(source="ID",
mapper=id,
name="ID",
display_name="ID",
description="The unique participant identifier"),
list(source="Eth_ethnicity",
mapper=ethnicity,
name="Eth_ethnicity",
display_name="ethnicity",
description="The participant's self-reported ethnicity")
)
common <- list(
list(source="ID",
mapper=id,
name="ID",
display_name="ID",
description="The unique participant identifier"),
list(source="Eth_ethnicity",
mapper=ethnicity,
name="Eth_ethnicity",
display_name="ethnicity",
description="The participant's self-reported ethnicity")
)
ID <- list(name="ID",
source="ID",
mapper=id,
display_name="ID",
description="The unique participant identifier")
ethnicity <- list(name="Eth_ethnicity",
source="Eth_ethnicity",
mapper=ethnicity,
display_name="ethnicity",
description="The participant's self-reported ethnicity")
common <- list(ID, ethnicity)
names(common) <- sapply(common, function(x) x$name)
ID <- list(name="ID",
source="ID",
mapper=id,
display_name="ID",
description="The unique participant identifier")
ethnicity <- list(name="Eth_ethnicity",
source="Eth_ethnicity",
mapper=ethnicity,
display_name="ethnicity",
description="The participant's self-reported ethnicity")
common <- list(ID, ethnicity)
names(common) <- sapply(common, function(x) x$name)
cols <- c("ID")
for(colname in cols){
common[[colname]]
}
for(colname in cols){
test <- common[[colname]]
}
inpath <- readChar("./data/raw/filepath.txt", file.info("./data/raw/filepath.txt")$size)
# Read in the baseline characteristics
covars <- readRDS("./data/clean/basechar.rds")
rsnlostfu <- list(name="BaC_RsnLostFU",
source="BaC_RsnLostFU",
display_name="lfu_reason",
description="The reported reason for loss to follow-up"
)
common <- list(ID, ethnicity, rsnlostfu)
FN_id <- function(x){x}
FN_unorder <- function(x){factor(x, ordered=FALSE)}
FN_ethnicity <- function(x){
factor(x, levels=c("White", "British", "Irish", "Any other white background",
"Mixed", "White and Black Caribbean", "White and Black African",
"White and Asian", "Any other mixed background",
"Asian or Asian British", "Indian", "Pakistani", "Bangladeshi",
"Any other Asian background",
"Black or Black British", "Caribbean", "African", "Any other Black background",
"Chinese", "Other ethnic group", "Do not know", "Prefer not to answer"))
}
ID <- list(name="ID",
source="ID",
mapper=FN_id,
display_name="ID",
description="The unique participant identifier")
ethnicity <- list(name="Eth_ethnicity",
source="Eth_ethnicity",
mapper=FN_ethnicity,
display_name="ethnicity",
description="The participant's self-reported ethnicity")
rsnlostfu <- list(name="BaC_RsnLostFU",
source="BaC_RsnLostFU",
mapper=FN_unorder,
display_name="lfu_reason",
description="The reported reason for loss to follow-up"
)
common <- list(ID, ethnicity, rsnlostfu)
names(common) <- sapply(common, function(x) x$name)
inpath <- readChar("./data/raw/filepath.txt", file.info("./data/raw/filepath.txt")$size)
# Read in the baseline characteristics
covars <- readRDS("./data/clean/basechar.rds")
cols <- c("ID", "BaC_RsnLostFU")
for(colname in cols){
test <- common[[colname]]
}
df <- covars
colinfo <- common[[colname]]
for(colname in cols){
colinfo <- common[[colname]]
df[[colinfo$name]] <- colinfo$mapper
}
test <- df[[colinfo$name]]
colfunc <- colinfo$mapper
for(colname in cols){
colinfo <- common[[colname]]
colfunc <- colinfo$mapper
df[[colinfo$name]] <- colfunc(colinfo$source)
}
df <- covars
for(colname in cols){
colinfo <- common[[colname]]
colfunc <- colinfo$mapper
df[[colinfo$name]] <- colfunc(df[[colinfo$source]])
}
FN_toDate <- function(d, m, y, format){
as.Date(paste0(as.character(d), as.character(m), as.character(y)), format)
}
dob <- list(name="TEU_DateOfBirth",
source="BaC_BirthMonth",
mapper=FN_toDate(d=15, format="%d%B%Y"),
display_name="DateOfBirth",
description="The patient's approximate date of birth, derived from self-reported month and year with date assumed to be 15th")
M
FN_MYtoDate <- function(day=15, monthField, yearField, format="%d%B%Y"){
function(x, data){
as.Date(paste0(as.character(day), as.character(data[[monthField]]), as.character(data[[yearField]])), format)
}
}
b
dob <- list(name="TEU_DateOfBirth",
source="BaC_BirthMonth",
mapper=FN_MYtoDate(monthField="BaC_BirthMonth", yearField="BaC_BirthYear"),
display_name="DateOfBirth",
description="The patient's approximate date of birth, derived from self-reported month and year with date assumed to be 15th")
common <- list(ID, ethnicity, rsnlostfu, dob)
inpath <- readChar("./data/raw/filepath.txt", file.info("./data/raw/filepath.txt")$size)
# Read in the baseline characteristics
covars <- readRDS("./data/clean/basechar.rds")
cols <- c("ID", "BaC_RsnLostFU", "BaC_BirthMonth")
names(common) <- sapply(common, function(x) x$name)
df <- covars
for(colname in cols){
colinfo <- common[[colname]]
colfunc <- colinfo$mapper
df[[colinfo$name]] <- colfunc(df[[colinfo$source]], df)
}
test <- "thing"
test2 <- c("thing1", "thing2")
length(test2)
length(test)
is.character(test2)
is.character(test)
is.vector(test)
is.array(test)
is.array(test2)
is.atomic(test)
is.atomic(test2)
is.list(test)
is.list(test3)
is.list(test2)
is.recursive(test)
is.recursive(test2)
FN_id <- function(x){x}
FN_unorder <- function(x){factor(x, ordered=FALSE)}
FN_ethnicity <- function(x){
factor(x, levels=c("White", "British", "Irish", "Any other white background",
"Mixed", "White and Black Caribbean", "White and Black African",
"White and Asian", "Any other mixed background",
"Asian or Asian British", "Indian", "Pakistani", "Bangladeshi",
"Any other Asian background",
"Black or Black British", "Caribbean", "African", "Any other Black background",
"Chinese", "Other ethnic group", "Do not know", "Prefer not to answer"))
}
FN_MYtoDate <- function(day, monthField, yearField, format="%d%B%Y"){
function(x, data){
as.Date(paste0(as.character(day), as.character(data[[monthField]]), as.character(data[[yearField]])), format)
}
}
ID <- list(name="ID",
source="ID",
mapper=FN_id,
display_name="ID",
description="The unique participant identifier")
ethnicity <- list(name="Eth_ethnicity",
source="Eth_ethnicity",
mapper=FN_ethnicity,
display_name="ethnicity",
description="The participant's self-reported ethnicity")
rsnlostfu <- list(name="BaC_RsnLostFU",
source="BaC_RsnLostFU",
mapper=FN_unorder,
display_name="lfu_reason",
description="The reported reason for loss to follow-up"
)
dob <- list(name="TEU_DateOfBirth",
source=c("BaC_BirthMonth", "BaC_BirthYear"),
mapper=FN_MYtoDate(day=15, monthField="BaC_BirthMonth", yearField="BaC_BirthYear"),
display_name="DateOfBirth",
description="The patient's approximate date of birth, derived from self-reported month and year with date assumed to be 15th")
common <- list(ID, ethnicity, rsnlostfu, dob)
inpath <- readChar("./data/raw/filepath.txt", file.info("./data/raw/filepath.txt")$size)
# Read in the baseline characteristics
covars <- readRDS("./data/clean/basechar.rds")
cols <- c("ID", "BaC_RsnLostFU", "BaC_BirthMonth")
names(common) <- sapply(common, function(x) x$name)
df <- covars
for(colname in cols){
colinfo <- common[[colname]]
colfunc <- colinfo$mapper
if(length(colinfo$source)>1){
df[[colinfo$name]] <- colfunc(df)
} else {
df[[colinfo$name]] <- colfunc(df[[colinfo$source]])
}
}
FN_MYtoDate <- function(day, monthField, yearField, format="%d%B%Y"){
return(
function(x, data){
as.Date(paste0(as.character(day), as.character(data[[monthField]]), as.character(data[[yearField]])), format)
}
)
}
for(colname in cols){
colinfo <- common[[colname]]
colfunc <- colinfo$mapper
if(length(colinfo$source)>1){
df[[colinfo$name]] <- colfunc(df)
} else {
df[[colinfo$name]] <- colfunc(df[[colinfo$source]])
}
}
cols <- c("ID", "BaC_RsnLostFU", "TEU_DateOfBirth")
names(common) <- sapply(common, function(x) x$name)
df <- covars
for(colname in cols){
colinfo <- common[[colname]]
colfunc <- colinfo$mapper
if(length(colinfo$source)>1){
df[[colinfo$name]] <- colfunc(df)
} else {
df[[colinfo$name]] <- colfunc(df[[colinfo$source]])
}
}
FN_MYtoDate <- function(day, monthField, yearField, format="%d%B%Y"){
return(
function(data){
as.Date(paste0(as.character(day), as.character(data[[monthField]]), as.character(data[[yearField]])), format)
}
)
}
for(colname in cols){
colinfo <- common[[colname]]
colfunc <- colinfo$mapper
if(length(colinfo$source)>1){
df[[colinfo$name]] <- colfunc(df)
} else {
df[[colinfo$name]] <- colfunc(df[[colinfo$source]])
}
}
FN_MYtoDate <- function(day, monthField, yearField, format="%d%B%Y"){
function(data){
as.Date(paste0(as.character(day), as.character(data[[monthField]]), as.character(data[[yearField]])), format)
}
}
for(colname in cols){
colinfo <- common[[colname]]
colfunc <- colinfo$mapper
if(length(colinfo$source)>1){
df[[colinfo$name]] <- colfunc(df)
} else {
df[[colinfo$name]] <- colfunc(df[[colinfo$source]])
}
}
dob <- list(name="TEU_DateOfBirth",
source=c("BaC_BirthMonth", "BaC_BirthYear"),
mapper=FN_MYtoDate(day=15, monthField="BaC_BirthMonth", yearField="BaC_BirthYear"),
display_name="DateOfBirth",
description="The patient's approximate date of birth, derived from self-reported month and year with date assumed to be 15th")
# Jennifer Collister
# 30/03/2020
# Create functions
FN_id <- function(x){x}
FN_unorder <- function(x){factor(x, ordered=FALSE)}
FN_ethnicity <- function(x){
factor(x, levels=c("White", "British", "Irish", "Any other white background",
"Mixed", "White and Black Caribbean", "White and Black African",
"White and Asian", "Any other mixed background",
"Asian or Asian British", "Indian", "Pakistani", "Bangladeshi",
"Any other Asian background",
"Black or Black British", "Caribbean", "African", "Any other Black background",
"Chinese", "Other ethnic group", "Do not know", "Prefer not to answer"))
}
FN_MYtoDate <- function(day, monthField, yearField, format="%d%B%Y"){
function(data){
as.Date(paste0(as.character(day), as.character(data[[monthField]]), as.character(data[[yearField]])), format)
}
}
ID <- list(name="ID",
source="ID",
mapper=FN_id,
display_name="ID",
description="The unique participant identifier")
ethnicity <- list(name="Eth_ethnicity",
source="Eth_ethnicity",
mapper=FN_ethnicity,
display_name="ethnicity",
description="The participant's self-reported ethnicity")
rsnlostfu <- list(name="BaC_RsnLostFU",
source="BaC_RsnLostFU",
mapper=FN_unorder,
display_name="lfu_reason",
description="The reported reason for loss to follow-up"
)
dob <- list(name="TEU_DateOfBirth",
source=c("BaC_BirthMonth", "BaC_BirthYear"),
mapper=FN_MYtoDate(day=15, monthField="BaC_BirthMonth", yearField="BaC_BirthYear"),
display_name="DateOfBirth",
description="The patient's approximate date of birth, derived from self-reported month and year with date assumed to be 15th")
common <- list(ID, ethnicity, rsnlostfu, dob)
inpath <- readChar("./data/raw/filepath.txt", file.info("./data/raw/filepath.txt")$size)
# Read in the baseline characteristics
covars <- readRDS("./data/clean/basechar.rds")
cols <- c("ID", "BaC_RsnLostFU", "TEU_DateOfBirth")
names(common) <- sapply(common, function(x) x$name)
df <- covars
for(colname in cols){
colinfo <- common[[colname]]
colfunc <- colinfo$mapper
if(length(colinfo$source)>1){
df[[colinfo$name]] <- colfunc(df)
} else {
df[[colinfo$name]] <- colfunc(df[[colinfo$source]])
}
}
FN_unorder <- function(x){factor(x, ordered=TRUE)}
for(colname in cols){
colinfo <- common[[colname]]
colfunc <- colinfo$mapper
if(length(colinfo$source)>1){
df[[colinfo$name]] <- colfunc(df)
} else {
df[[colinfo$name]] <- colfunc(df[[colinfo$source]])
}
}
FN_unorder <- function(x){factor(x, ordered=FALSE)}
for(colname in cols){
colinfo <- common[[colname]]
colfunc <- colinfo$mapper
if(length(colinfo$source)>1){
df[[colinfo$name]] <- colfunc(df)
} else {
df[[colinfo$name]] <- colfunc(df[[colinfo$source]])
}
print(colinfo$name)
print(colinfo$description)
}
df <- df[,cols]
inpath <- readChar("./data/raw/filepath.txt", file.info("./data/raw/filepath.txt")$size)
# Read in the baseline characteristics
covars <- readRDS("./data/clean/basechar.rds")
cols_TLA <- strsplit(cols, split="_", fixed=TRUE)
cols[-which(names(cols))=="ID"]
cols[-which(names(cols)=="ID")]
cols[-which(cols=="ID")]
cols_TLA <- strsplit(cols[-which(cols=="ID")], split="_", fixed=TRUE)
cols_TLA <- strsplit(cols[-which(cols=="ID")], split="_", fixed=TRUE)[[1]]
cols_TLA <- sub("_*", "", cols[-which(cols=="ID")])
cols_TLA <- sub("_.*", "", cols[-which(cols=="ID")])
cols_TLA <- unique(sub("_.*", "", cols[-which(cols=="ID")]))
inpath <- readChar("./data/raw/filepath.txt", file.info("./data/raw/filepath.txt")$size)
data <- readRDS(paste0(inpath, "GAC_base", ".rds"))
table(data$GAC_WillingCog)
data <- readRDS(paste0(inpath, "CFF_base", ".rds"))
data <- readRDS(paste0(inpath, "HMH_base", ".rds"))
data <- readRDS(paste0(inpath, "HoH_base", ".rds"))
data <- readRDS(paste0(inpath, "Sun_base", ".rds"))
data <- readRDS(paste0(inpath, "VeI_base", ".rds"))
data <- readRDS(paste0(inpath, "VeIcovars_base", ".rds"))
tables <- paste0(inpath, tables, ".rds")
tables <- c("Alc_base", "ArS_base", "BaC", "BBC_base", "BlP_base", "BSM_base","CoF_base",
"Die_base", "Edu_base", "Emp_base", "Eth_base", "FaH_base", "GAC_base", "HMH_base",
"HoH_base", "PhA_base", "Rec_base", "Sle_base", "Smo_base", "Sun_base", "VeIcovars_base")
inpath <- readChar("./data/raw/filepath.txt", file.info("./data/raw/filepath.txt")$size)
tables <- paste0(inpath, tables, ".rds")
tables
alldata <- Reduce(function(fp1, fp2) merge(readRDS(fp1), readRDS(fp2), by = "ID", all.x = TRUE),
tables)
data <- readRDS(paste0(inpath, "Die_base", ".rds"))
tables <- c("Alc_base", "ArS_base", "BaC", "BBC_base", "BlP_base", "BSM_base","CoF_base",
"Die_base", "Edu_base", "Emp_base", "Eth_base", "FaH_base", "GAC_base", "HMH_base",
"HoH_base", "PhA_base", "Rec_base", "Sle_base", "Smo_base", "Sun_base", "VeIcovars_base")
inpath <- readChar("./data/raw/filepath.txt", file.info("./data/raw/filepath.txt")$size)
tablepaths <- list(paste0(inpath, tables, ".rds"))
tables <- list("Alc_base", "ArS_base", "BaC", "BBC_base", "BlP_base", "BSM_base","CoF_base",
"Die_base", "Edu_base", "Emp_base", "Eth_base", "FaH_base", "GAC_base", "HMH_base",
"HoH_base", "PhA_base", "Rec_base", "Sle_base", "Smo_base", "Sun_base", "VeIcovars_base")
inpath <- readChar("./data/raw/filepath.txt", file.info("./data/raw/filepath.txt")$size)
tablepaths <- paste0(inpath, tables, ".rds")
tablepaths <- as.list(paste0(inpath, tables, ".rds"))
alldata <- Reduce(function(fp1, fp2) merge(readRDS(fp1), readRDS(fp2), by = "ID", all.x = TRUE), tablepaths)
alldata <- Reduce(function(fp1, fp2) print(fp1), tablepaths)
tablepaths[1]
thing1 <- readRDS(tablepaths[[1]])
thing1 <- readRDS(tablepaths[1])
thing1 <- readRDS(tablepaths[1][1])
t1 <- tablepaths[1]
thing1 <- readRDS(tablepaths[1][[1]])
alldata <- Reduce(function(fp1, fp2) merge(readRDS(fp1[[1]]), readRDS(fp2[[1]]), by = "ID", all.x = TRUE), tablepaths)
dfs <- list()
for(tabname in tables){
dfs[[tabname]] <- readRDS(paste0(inpath, tabname, ".rds"))
}
alldata <- Reduce(function(df1, df2) merge(df1, df2, by = "ID", all.x = TRUE), dfs)
thing <- readRDS(paste0(inpath, "HMH_base", ".rds"))
View(thing)
unique(thing$HMH_HeartProbs.0)
