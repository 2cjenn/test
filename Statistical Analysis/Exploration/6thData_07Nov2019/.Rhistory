#--------------------------------------------------------------------------------------------------------------
names(medhist)[names(medhist)=="HMH_IllDisab"] <- "illdisab"
names(medhist)[names(medhist)=="HMH_Diabetes"] <- "diabetes"
saveRDS(medhist[,c("ID", "medication", "HBPmeds", "diabmeds", "cholmeds", "contraceptive", "HRT",
"vasc_cond", "prevHBP", "prevstroke", "prevCVD", "illdisab", "diabetes")],
file="K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\tq_medhist.rds")
base <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\BaC.rds")
rec <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Rec_base.rds")
basechar <- merge(base, rec, by="ID", all=TRUE)
# Convert dates to date format
basechar$recdate <- as.Date(basechar$Rec_DateAssess, origin=as.Date("1970-01-01"))
basechar$lfudate <- as.Date(basechar$BaC_DateLostFU, origin=as.Date("1970-01-01"))
# Estimate date of birth as the 15th of the month of birth
basechar$dob <- as.Date(paste0("15",basechar$BaC_BirthMonth, basechar$BaC_BirthYear), "%d%B%Y")
# Calculate age at recruitment
basechar$age <- as.numeric(round(difftime(basechar$recdate, basechar$dob, unit="days")/365.25,2))
# I don't think gender should be ordered
basechar$gender <- factor(basechar$BaC_Sex, ordered=FALSE)
names(basechar)[names(basechar)=="BaC_RsnLostFU"] <- "lfureason"
names(basechar)[names(basechar)=="BaC_DeprivInd"] <- "townsend_depind"
saveRDS(basechar[,c("ID", "dob", "age", "gender", "recdate", "lfudate", "lfureason", "townsend_depind")],
file="K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\basechar.rds")
ethnicity <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Eth_base.rds")
# Reorder the factor levels to make more sense
ethnicity$Eth_Ethnicity <- factor(ethnicity$Eth_Ethnicity, levels=c("White", "British", "Irish", "Any other white background",
"Mixed", "White and Black Caribbean", "White and Black African",
"White and Asian", "Any other mixed background",
"Asian or Asian British", "Indian", "Pakistani", "Bangladeshi",
"Any other Asian background",
"Black or Black British", "Caribbean", "African", "Any other Black background",
"Chinese", "Other ethnic group", "Do not know", "Prefer not to answer"))
# Individuals that didn't answer the subgroup question get moved to the relevant "other" for their group
ethnicity$group <- ethnicity$Eth_Ethnicity
ethnicity$group[ethnicity$Eth_Ethnicity %in% c("White", "British", "Irish", "Any other white background")] <- "White"
ethnicity$group[ethnicity$Eth_Ethnicity %in% c("Mixed", "White and Black Caribbean", "White and Black African", "White and Asian", "Any other mixed background")] <- "Mixed"
ethnicity$group[ethnicity$Eth_Ethnicity %in% c("Asian or Asian British", "Indian", "Pakistani", "Bangladeshi", "Any other Asian background")] <- "Asian or Asian British"
ethnicity$group[ethnicity$Eth_Ethnicity %in% c("Black or Black British", "Caribbean", "African", "Any other Black background")] <- "Black or Black British"
ethnicity$group[is.na(ethnicity$Eth_Ethnicity)] <- "Prefer not to answer"
ethnicity$group <- factor(ethnicity$group)
# Top level categorisation
ethnicity$eth <- ethnicity$Eth_Ethnicity
ethnicity$eth[ethnicity$eth == "White"] <- "Any other white background"
ethnicity$eth[ethnicity$eth == "Mixed"] <- "Any other mixed background"
ethnicity$eth[ethnicity$eth == "Asian or Asian British"] <- "Any other Asian background"
ethnicity$eth[ethnicity$eth == "Black or Black British"] <- "Any other Black background"
ethnicity$eth[is.na(ethnicity$eth)] <- "Prefer not to answer"
ethnicity$eth <- factor(ethnicity$eth)
saveRDS(ethnicity[,c("ID", "Eth_Ethnicity", "group", "eth")],
file="K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\ethnicity.rds")
HES <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\HES.rds")
source("K:/TEU/APOE on Dementia/Statistical Analysis/JCfunctions.R")
# ICD 10 codes for dementia
alz_ICD10 <- c("F00")
vasc_ICD10 <- c("F01")
other_ICD10 <- c("F02", "F03")
dement_ICD10 <- c(alz_ICD10, vasc_ICD10, other_ICD10)
# ICD 9 codes for dementia
alz_ICD9 <- c("3310")
vasc_ICD9 <- c("2904")
other_ICD9 <- c("2900", "2901", "2902", "2903", "2941", "2942", "3311")
dement_ICD9 <- c(alz_ICD9, vasc_ICD9, other_ICD9)
# Filter out dementia diagnoses and dates only
ICD10Diag <- HES[,c(1,grep("HES_ICD10Diag", colnames(HES), fixed=TRUE),grep("HES_ICD10DateFirst", colnames(HES), fixed=TRUE))]
ICD10DiagS <- code_filter(df=ICD10Diag, diagcolname="HES_ICD10Diag", datecolname="HES_ICD10DateFirst", ncols=212, codelist=dement_ICD10, separator=".m", first=FALSE)
# Keep only the first dementia diagnosis (of any kind) per person
ICD10DiagFirst <- do.call(rbind, by(ICD10DiagS, ICD10DiagS[,c("ID")], function(x) x[which.min(x$Date),]))
# Classify the dementia diagnoses by type of dementia
ICD10DiagFirst$type <- ifelse(substr(ICD10DiagFirst$Code, 1, 3) %in% alz_ICD10, "Alzheimers",
ifelse(substr(ICD10DiagFirst$Code, 1, 3) %in% vasc_ICD10, "Vascular", "Other"))
# Repeat for ICD9 diagnoses
ICD9Diag <- HES[,c(1,grep("HES_ICD9Diag", colnames(HES), fixed=TRUE),grep("HES_ICD9DateFirst", colnames(HES), fixed=TRUE))]
ICD9Diag <- code_filter(df=ICD9Diag, diagcolname="HES_ICD9Diag", datecolname="HES_ICD9DateFirst", ncols=46, codelist=dement_ICD9, separator=".m", first=FALSE)
ICD9DiagFirst <- do.call(rbind, by(ICD9Diag, ICD9Diag[,c("ID")], function(x) x[which.min(x$Date),]))
ICD9DiagFirst$type <- ifelse(substr(ICD9DiagFirst$Code, 1, 3) %in% alz_ICD9, "Alzheimers",
ifelse(substr(ICD9DiagFirst$Code, 1, 3) %in% vasc_ICD9, "Vascular", "Other"))
# Combine the ICD10 and ICD9 diagnoses into one dementia diagnosis dataset
dementia <- rbind(ICD10DiagFirst, ICD9DiagFirst)
# And again keep only the first dementia per person
dementia <- do.call(rbind, by(dementia, dementia[,c("ID")], function(x) x[which.min(x$Date),]))
names(dementia)[names(dementia)=="Date"] <- "dement_date"
names(dementia)[names(dementia)=="Code"] <- "dement_code"
names(dementia)[names(dementia)=="type"] <- "dement_type"
saveRDS(dementia, file="K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\dementia.rds")
# https://www.ahajournals.org/doi/full/10.1161/01.STR.0000174293.17959.a1
HES <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\HES.rds")
source("K:/TEU/APOE on Dementia/Statistical Analysis/JCfunctions.R")
# ICD 10 codes for stroke
haem_ICD10 <- c("I60", "I61")
infarct_ICD10 <- c("I63")
other_ICD10 <- c("I64")
stroke_ICD10 <- c(haem_ICD10, infarct_ICD10, other_ICD10)
# ICD 9 codes for stroke
haem_ICD9 <- c("430", "431")
infarct_ICD9 <- c("433")
other_ICD9 <- c("434","436")
stroke_ICD9 <- c(haem_ICD9, infarct_ICD9, other_ICD9)
# Filter out dementia diagnoses and dates only
ICD10Diag <- HES[,c(1,grep("HES_ICD10Diag", colnames(HES), fixed=TRUE),grep("HES_ICD10DateFirst", colnames(HES), fixed=TRUE))]
ICD10DiagS <- code_filter(df=ICD10Diag, diagcolname="HES_ICD10Diag", datecolname="HES_ICD10DateFirst", ncols=212, codelist=stroke_ICD10, separator=".m", first=FALSE)
# Keep only the first dementia diagnosis (of any kind) per person
ICD10DiagFirst <- do.call(rbind, by(ICD10DiagS, ICD10DiagS[,c("ID")], function(x) x[which.min(x$Date),]))
# Classify the dementia diagnoses by type of dementia
ICD10DiagFirst$type <- ifelse(substr(ICD10DiagFirst$Code, 1, 3) %in% haem_ICD10, "Haemorrhagic",
ifelse(substr(ICD10DiagFirst$Code, 1, 3) %in% infarct_ICD10, "Ischaemic", "Other"))
# Repeat for ICD9 diagnoses
ICD9Diag <- HES[,c(1,grep("HES_ICD9Diag", colnames(HES), fixed=TRUE),grep("HES_ICD9DateFirst", colnames(HES), fixed=TRUE))]
ICD9Diag <- code_filter(df=ICD9Diag, diagcolname="HES_ICD9Diag", datecolname="HES_ICD9DateFirst", ncols=46, codelist=stroke_ICD9, separator=".m", first=FALSE)
ICD9DiagFirst <- do.call(rbind, by(ICD9Diag, ICD9Diag[,c("ID")], function(x) x[which.min(x$Date),]))
ICD9DiagFirst$type <- ifelse(substr(ICD9DiagFirst$Code, 1, 3) %in% haem_ICD9, "Haemorrhagic",
ifelse(substr(ICD9DiagFirst$Code, 1, 3) %in% infarct_ICD9, "Ischaemic", "Other"))
# Combine the ICD10 and ICD9 diagnoses into one dementia diagnosis dataset
stroke <- rbind(ICD10DiagFirst, ICD9DiagFirst)
# And again keep only the first dementia per person
stroke <- do.call(rbind, by(stroke, stroke[,c("ID")], function(x) x[which.min(x$Date),]))
names(stroke)[names(stroke)=="Date"] <- "stroke_date"
names(stroke)[names(stroke)=="Code"] <- "stroke_code"
names(stroke)[names(stroke)=="type"] <- "stroke_type"
saveRDS(stroke, file="K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\stroke.rds")
veint <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\VeI_base.rds")
veint <- veint[,c(1, grep("VeI_NonCancerCode.", colnames(veint), fixed=TRUE))]
coding6 <- read.table("K:/TEU/CancerPRS/Data_Dictionary/Mappings/coding6.tsv", sep="\t", header=TRUE, quote="", comment.char="$", fill=FALSE)
# Indicator variables for many health conditions of interest
strcodes <- coding6[grep("stroke|ischaemic stroke|subdural haemorrhage|subarachnoid haemorrhage|brain haemorrhage", coding6$meaning),]
veint$VIstroke <- apply(veint[,grep("VeI_NonCancerCode", colnames(veint), fixed=TRUE)], 1, function(x) any(x %in% strcodes$coding))
bpcodes <- coding6[grep("hypertension|essential hypertension", coding6$meaning),]
veint$VIhyp <- apply(veint[,grep("VeI_NonCancerCode", colnames(veint), fixed=TRUE)], 1, function(x) any(x %in% bpcodes$coding))
asthcodes <- coding6[grep("asthma", coding6$meaning),]
veint$VIasth <- apply(veint[,grep("VeI_NonCancerCode", colnames(veint), fixed=TRUE)], 1, function(x) any(x %in% asthcodes$coding))
copdcodes <- coding6[grep("copd", coding6$meaning),]
veint$VIcopd <- apply(veint[,grep("VeI_NonCancerCode", colnames(veint), fixed=TRUE)], 1, function(x) any(x %in% copdcodes$coding))
dementiacodes <-coding6[grep("dementia", coding6$meaning),]
veint$VIdementia <- apply(veint[,grep("VeI_NonCancerCode", colnames(veint), fixed=TRUE)], 1, function(x) any(x %in% dementiacodes$coding))
# Here it seems likely that NA doesn't mean not answered, but rather not applicable
# for(col in c("VIstroke", "VIhyp", "VIasth", "VIcopd", "VIdementia")){
#   veint[[col]][is.na(veint$VeI_NonCancerCode.0)] <- NA
# }
veint_medhist <- veint[,c("ID", "VIstroke", "VIhyp", "VIdementia", "VIasth", "VIcopd")]
saveRDS(veint_medhist, file="K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\veint_medhist.rds")
deaths <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Dth.rds")
deaths$deathdate <- pmin(deaths$Dth_Date.m0.i0, deaths$Dth_Date.m0.i1, na.rm=TRUE)
deaths$demdeath <- apply(deaths[,grep("Dth_ICD10", colnames(deaths), fixed=TRUE)], 1, function(x) any(substr(x, 1, 3) %in% dement_ICD10))
deaths$strdeath <- apply(deaths[,grep("Dth_ICD10", colnames(deaths), fixed=TRUE)], 1, function(x) any(substr(x, 1, 3) %in% stroke_ICD10))
saveRDS(deaths[,c("ID", "deathdate", "demdeath", "strdeath", "Dth_Cause.m0.i0")],
file="K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\deathdate.rds")
smoking <- readRDS(paste0(filepath, "Smo_base", ".rds"))
smoking$Smo_Status = factor(smoking$Smo_Status, ordered=FALSE)
alcohol <- readRDS(paste0(filepath, "Alc_base", ".rds"))
alcohol$Alc_Status = factor(alcohol$Alc_Status, ordered=FALSE)
covars <- merge(smoking[,c("ID", "Smo_Status", "Smo_TobaccoCurr", "Smo_TobaccoPast")],
alcohol[,c("ID", "Alc_Status", "Alc_Freq")], by="ID", all=TRUE)
household <- readRDS(paste0(filepath, "HoH_base", ".rds"))
household$income <- household$HoH_PreTaxInc.0
household$income[is.na(household$income)] <- household$HoH_PreTaxInc_P.0[is.na(household$income)]
covars <- merge(covars, household[,c("ID", "income", "HoH_HouseholdSize.0")], by="ID", all=TRUE)
sleep <- readRDS(paste0(filepath, "Sle_base", ".rds"))
covars <- merge(covars, sleep, by="ID", all=TRUE)
body <- readRDS(paste0(filepath, "BSM_base", ".rds"))
covars <- merge(covars, body[,c("ID", "BSM_HeightStand", "BSM_Weight", "BSM_BMI")], by="ID", all=TRUE)
education <- readRDS(paste0(filepath, "Edu_base", ".rds"))
education$uni <- apply(education[,grep("Edu_Qualif", colnames(education), fixed=TRUE)], 1, function(x) any(x == "College or University degree" & !is.na(x)))
education$eduNA <- apply(education[,grep("Edu_Qualif", colnames(education), fixed=TRUE)], 1, function(x) any(x == "Prefer not to answer" & !is.na(x)))
covars <- merge(covars, education[,c("ID", "uni", "eduNA", "Edu_Age.0")], by="ID", all=TRUE)
saveRDS(covars, file="K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\covars.rds")
bp <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\bp.rds")
ethnicity <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\ethnicity.rds")
basechar <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\basechar.rds")
dementia <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\dementia.rds")
VImedhist <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\veint_medhist.rds")
TQmedhist <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\tq_medhist.rds")
deathdate <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\deathdate.rds")
covars <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\covars.rds")
# Combine the baseline characteristics with the ethnicities
data <- merge(basechar, ethnicity, by="ID", all=TRUE)
# And with the dates of death
data <- merge(data, deathdate, by="ID", all=TRUE)
# And with the blood pressure data
data <- merge(data, bp, by="ID", all=TRUE)
# And the medical history data from the touchscreen assessment
data <- merge(data, TQmedhist, by="ID", all=TRUE)
# And the medical history data from the verbal interview
data <- merge(data, VImedhist, by="ID", all=TRUE)
# And with the dementia diagnoses from HES data over the course of the study
data <- merge(data, dementia, by="ID", all=TRUE)
# And with all other selected covariates
data <- merge(data, covars, by="ID", all=TRUE)
# Combine the apoe data with all the other UKB data
apoe <- readRDS("K:\\TEU\\UKB Genetic Data\\SNP Extraction\\APOE_20191018\\extracted_files\\R\\gen_apoe.rds")
names(apoe)[names(apoe)=="IID"] <- "ID"
length(unique(apoe$ID))
apoe <- merge(apoe, data, by="ID")
# Single variable for self-reported hypertension
# If reported in either touchscreen questionnaire or verbal interview
apoe$selfrephyp <- data$prevHBP==TRUE | data$VIhyp==TRUE
bp <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\bp.rds")
ethnicity <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\ethnicity.rds")
basechar <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\basechar.rds")
dementia <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\dementia.rds")
VImedhist <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\veint_medhist.rds")
TQmedhist <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\tq_medhist.rds")
deathdate <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\deathdate.rds")
covars <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\covars.rds")
# Combine the baseline characteristics with the ethnicities
data <- merge(basechar, ethnicity, by="ID", all=TRUE)
# And with the dates of death
data <- merge(data, deathdate, by="ID", all=TRUE)
# And with the blood pressure data
data <- merge(data, bp, by="ID", all=TRUE)
# And the medical history data from the touchscreen assessment
data <- merge(data, TQmedhist, by="ID", all=TRUE)
# And the medical history data from the verbal interview
data <- merge(data, VImedhist, by="ID", all=TRUE)
# And with the dementia diagnoses from HES data over the course of the study
data <- merge(data, dementia, by="ID", all=TRUE)
# And with all other selected covariates
data <- merge(data, covars, by="ID", all=TRUE)
# Combine the apoe data with all the other UKB data
apoe <- readRDS("K:\\TEU\\UKB Genetic Data\\SNP Extraction\\APOE_20191018\\extracted_files\\R\\gen_apoe.rds")
names(apoe)[names(apoe)=="IID"] <- "ID"
length(unique(apoe$ID))
apoe <- merge(apoe, data, by="ID")
# Single variable for self-reported hypertension
# If reported in either touchscreen questionnaire or verbal interview
apoe$selfrephyp <- apoe$prevHBP==TRUE | apoe$VIhyp==TRUE
# Indicator variable for "some evidence of hypertension" vs "no evidence of hypertension"
apoe$evidenceHTN <- (apoe$HBPmeds==TRUE | apoe$measuredhyp==TRUE | apoe$selfrephyp==TRUE)
unique(apoe$evidenceHTN)
saveRDS(apoe, file="K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\apoe_raw.rds")
unique(apoe$selfrephyp)
apoe <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\apoe_raw.rds")
# Individuals with dementia as a cause of death should be included as having dementia
apoe$eventdate <- apoe$dement_date
apoe$eventdate[apoe$demdeath==TRUE] <- pmin(apoe$dement_date[apoe$demdeath==TRUE], apoe$deathdate[apoe$demdeath==TRUE], na.rm=TRUE)
# Calculate time in days to different end points
# Time to HES-recorded diagnosis of dementia
apoe$demtime <- as.numeric(difftime(apoe$eventdate, apoe$recdate, unit='days'))
# Time to death
apoe$deathtime <- as.numeric(difftime(apoe$deathdate, apoe$recdate, unit='days'))
# Time until lost to follow-up
apoe$lfutime <- as.numeric(difftime(apoe$lfudate, apoe$recdate, unit='days'))
# Administrative censoring:
# England 31/03/2017, Scotland 31/10/2016, Wales 29/02/2016
# Majority of data is from England therefore use that date
apoe$actime <- as.numeric(difftime(as.Date("31Mar2017", "%d%B%Y"), apoe$recdate, units="days"))
# For the survival analysis, we want the time until the first of these end points
apoe$time_to_dementia <- pmin(apoe$demtime, apoe$deathtime, apoe$lfutime, apoe$actime, na.rm=TRUE)
apoe$time_to_dementia_yrs <- apoe$time_to_dementia/365.25
# The status is whether they received a dementia diagnosis by the end point
apoe$dementia_status <- (!is.na(apoe$demtime) & apoe$demtime == apoe$time_to_dementia)
# At the moment, the censoring date from HES data is before the latest death registry data
# So we have 45 individuals who have dementia listed on their death certificate, but who died after the current administrative follow-up point
# Alas for wasted data
hmm <- apoe[apoe$dementia_status==0 & apoe$demdeath==TRUE,]
saveRDS(apoe, file="K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\apoe_surv.rds")
unique(apoe$evidenceHTN)
# Read in the dataset
# n = 514,776
apoe <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\apoe_surv.rds")
apoe$e4carrier <- apoe$apoe4>0
apoe$apoe4 <- factor(apoe$apoe4)
apoe$number_of_apoe4_alleles <- apoe$apoe4
apoe$alcdaily <- apoe$Alc_Freq=="Daily or almost daily"
apoe$diab <- apoe$diabetes=="Yes"
## Remove individuals who have withdrawn from UKB
withdrawn <- read.csv("K:\\TEU\\APOE on Dementia\\Data Management\\WithdrawnIDs.csv", header=FALSE)
apoe <- apoe[!apoe$ID %in% withdrawn$V1,]
## Genetic exclusions
# Exclude individuals with APOE e1 because it's rare and don't know much about it
# Exclude individuals with genotype e2/e4 because they cancel out?
# Also can't be definitively sure if genotype is e1/e3 or e2/e4
# n = 11,493
apoe <- apoe[apoe$apoe1==0 & !is.na(apoe$apoe1),]
# Exclude individuals with genetic/reported sex mismatch
# n=337
apoe$Sex <- factor(apoe$Sex, ordered=FALSE)
apoe <- apoe[apoe$Sex == apoe$gender,]
## Other important exclusions
# Exclude individuals with missing BP data
# n = 432
apoe <- apoe[!is.na(apoe$SBP) & !is.na(apoe$DBP),]
apoe <- apoe[!is.na(apoe$definedhypertension),]
# Restrict to self-report "white"
apoe$cauc <- apoe$group=="White"
apoe <- apoe[apoe$cauc==TRUE,]
# Exclude individuals with prevalent dementia
# n = 155
apoe <- apoe[!apoe$VIdementia,]
apoe <- apoe[is.na(apoe$dement_date) | (apoe$dement_date>apoe$recdate & !is.na(apoe$dement_date)),]
# Exclude individuals with no age data
# n = 0
apoe <- apoe[!is.na(apoe$age),]
# Exclude those outside the 40-70 age range
# n = 2247
apoe <- apoe[apoe$age >= 40 & apoe$age < 70,]
# Remaining n = 474,343
saveRDS(apoe, file="K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\apoe_excl.rds")
unique(apoe$evidenceHTN)
# Read in the dataset
# n = 514,776
apoe <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\apoe_surv.rds")
apoe$e4carrier <- apoe$apoe4>0
apoe$apoe4 <- factor(apoe$apoe4)
apoe$number_of_apoe4_alleles <- apoe$apoe4
apoe$alcdaily <- apoe$Alc_Freq=="Daily or almost daily"
apoe$diab <- apoe$diabetes=="Yes"
## Remove individuals who have withdrawn from UKB
withdrawn <- read.csv("K:\\TEU\\APOE on Dementia\\Data Management\\WithdrawnIDs.csv", header=FALSE)
apoe <- apoe[!apoe$ID %in% withdrawn$V1,]
# Exclude individuals with APOE e1 because it's rare and don't know much about it
# Exclude individuals with genotype e2/e4 because they cancel out?
# Also can't be definitively sure if genotype is e1/e3 or e2/e4
# n = 11,493
apoe <- apoe[apoe$apoe1==0 & !is.na(apoe$apoe1),]
# Exclude individuals with genetic/reported sex mismatch
# n=337
apoe$Sex <- factor(apoe$Sex, ordered=FALSE)
apoe <- apoe[apoe$Sex == apoe$gender,]
# Exclude individuals with missing BP data
# n = 432
apoe <- apoe[!is.na(apoe$SBP) & !is.na(apoe$DBP),]
apoe <- apoe[!is.na(apoe$evidenceHTN),]
apoe <- readRDS("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\apoe_surv.rds")
apoe$e4carrier <- apoe$apoe4>0
apoe$apoe4 <- factor(apoe$apoe4)
apoe$number_of_apoe4_alleles <- apoe$apoe4
apoe$alcdaily <- apoe$Alc_Freq=="Daily or almost daily"
apoe$diab <- apoe$diabetes=="Yes"
## Remove individuals who have withdrawn from UKB
withdrawn <- read.csv("K:\\TEU\\APOE on Dementia\\Data Management\\WithdrawnIDs.csv", header=FALSE)
apoe <- apoe[!apoe$ID %in% withdrawn$V1,]
## Genetic exclusions
# Exclude individuals with APOE e1 because it's rare and don't know much about it
# Exclude individuals with genotype e2/e4 because they cancel out?
# Also can't be definitively sure if genotype is e1/e3 or e2/e4
# n = 11,493
apoe <- apoe[apoe$apoe1==0 & !is.na(apoe$apoe1),]
# Exclude individuals with genetic/reported sex mismatch
# n=337
apoe$Sex <- factor(apoe$Sex, ordered=FALSE)
apoe <- apoe[apoe$Sex == apoe$gender,]
## Other important exclusions
# Exclude individuals with missing BP data
# n = 432
apoe <- apoe[!is.na(apoe$SBP) & !is.na(apoe$DBP),]
apoe <- apoe[!is.na(apoe$evidenceHTN),]
# Restrict to self-report "white"
apoe$cauc <- apoe$group=="White"
apoe <- apoe[apoe$cauc==TRUE,]
# Exclude individuals with prevalent dementia
# n = 155
apoe <- apoe[!apoe$VIdementia,]
apoe <- apoe[is.na(apoe$dement_date) | (apoe$dement_date>apoe$recdate & !is.na(apoe$dement_date)),]
# Exclude individuals with no age data
# n = 0
apoe <- apoe[!is.na(apoe$age),]
# Exclude those outside the 40-70 age range
# n = 2247
apoe <- apoe[apoe$age >= 40 & apoe$age < 70,]
# Remaining n = 474,343
saveRDS(apoe, file="K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\apoe_excl.rds")
# Make the key dichotomous variables into factors to improve readability of outputs
apoe$prevHBP_ <- factor(as.numeric(apoe$prevHBP), levels=c(0,1), labels=c("Did not report prior HTN diagnosis (touchscreen)", "Self-reported prior HTN diagnosis in touchscreen questionnaire"))
apoe$VIhyp_ <- factor(as.numeric(apoe$VIhyp), levels=c(0,1), labels=c("Did not report prior HTN diagnosis (VI)", "Self-reported prior HTN diagnosis in verbal interview"))
apoe$selfrephyp_ <- factor(as.numeric(apoe$selfrephyp), levels=c(0,1), labels=c("Did not report prior HTN diagnosis", "Self-reported prior HTN diagnosis"))
apoe$measuredhyp_ <- factor(as.numeric(apoe$measuredhyp), levels=c(0,1), labels=c("Measured BP < 140/90 at baseline", "Measured BP >= 140/90 at baseline"))
apoe$controlled_ <- factor(as.numeric(apoe$controlled), levels=c(0,1), labels=c("Inadequately controlled", "Successfully controlled"))
apoe$treated <- apoe$HBPmeds
apoe$treated_ <- factor(as.numeric(apoe$treated), levels=c(0,1), labels=c("Did not report BP medication", "Self-reported BP medication"))
apoe$evidenceHTN_ <- factor(as.numeric(apoe$evidenceHTN), levels=c(0,1), labels=c("No evidence of hypertension", "Evidence of hypertension"))
saveRDS(apoe, file="K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\Organised\\apoe_labelled.rds")
library(dplyr)
library(tidyr)
library(reshape)
library(readxl)
library(RSQLite)
library(DBI)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# fileloc <- "K:\\TEU\\CancerPRS\\6thData_07Nov2019\\R\\117fields\\ukb38358.R"
fileloc <- "K:\\TEU\\CancerPRS\\6thData_07Nov2019\\R\\100fieldsNeo\\extra\\ukb38358.R"
# fileloc <- "J:\\UKB\\38358\\R\\Extra\\ukb38358.R"
# First make sure the biobank data has been loaded, if not then load it
if(exists("bd") && is.data.frame(get("bd"))) {
print("Good to go")
} else {
print("Please wait a moment")
source(fileloc)
rm(list=(ls()[ls()!="bd"]))
print("Ok, ready!")
}
## Remove individuals who have withdrawn from UKB
withdrawn <- read.csv("K:\\TEU\\APOE on Dementia\\Data Management\\WithdrawnIDs.csv", header=FALSE)
bd <- bd[!bd$f.eid %in% withdrawn$V1,]
#--------------------------------------------------------------------------------------------------------------
# Jennifer Collister 12/11/2019
# Load the UKB data, rename the variables and split it into manageable separate tables
# Split by TLA and consider using a SQLite DB?
#--------------------------------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(reshape)
library(readxl)
library(RSQLite)
library(DBI)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# fileloc <- "K:\\TEU\\CancerPRS\\6thData_07Nov2019\\R\\117fields\\ukb38358.R"
fileloc <- "K:\\TEU\\CancerPRS\\6thData_07Nov2019\\R\\100fieldsNeo\\extra\\ukb38358.R"
# fileloc <- "J:\\UKB\\38358\\R\\Extra\\ukb38358.R"
# First make sure the biobank data has been loaded, if not then load it
if(exists("bd") && is.data.frame(get("bd"))) {
print("Good to go")
} else {
print("Please wait a moment")
source(fileloc)
rm(list=(ls()[ls()!="bd"]))
print("Ok, ready!")
}
## Remove individuals who have withdrawn from UKB
withdrawn <- read.csv("K:\\TEU\\APOE on Dementia\\Data Management\\WithdrawnIDs.csv", header=FALSE)
bd <- bd[!bd$f.eid %in% withdrawn$V1,]
#--------------------------------------------------------------------------------------------------------------
# Prep for labelling instances
# Find instance type per data field
dataProperties <- read_excel("K:\\TEU\\CancerPRS\\Data_Dictionary\\Mappings\\DataFieldProperties.xlsx")
instances <- read_excel("K:\\TEU\\CancerPRS\\Data_Dictionary\\Mappings\\instances.xlsx")
instvalues <- read_excel("K:\\TEU\\CancerPRS\\Data_Dictionary\\Mappings\\insvalue.xlsx")
dataInstances <- left_join(dataProperties[,c("field_id", "instance_id")], instvalues[,c("instance_id", "index", "title")], by="instance_id")
# Split the column names into data code, instance and measurement
cols <- data.frame("full"=colnames(bd)[-1])
cols <- separate(cols, col=full, into=c("f", "code", "instance", "measurement"), convert=TRUE, remove=FALSE, fill="right")
# Find instance type per data code
cols <- left_join(cols, dataInstances, by=c("code" = "field_id", "instance" = "index"))
cols$instlabel <- ifelse(is.na(cols$title), cols$instance, cols$title)
# Read in the data dictionary
matching <- read.csv("K:\\TEU\\CancerPRS\\Data_Dictionary\\Renaming_List_UPDATE_Nov2019_TEU.csv")
# matching <- read_excel("K:\\TEU\\CancerPRS\\Data_Dictionary\\Renaming_List_UPDATE_Nov2019_TEU_20191113.xlsx")
# # Use this to find the codes that were in our data but not Alex's; add them to the matching list
antis <- anti_join(cols, matching, by=c("code" = "Field_ID"))
unique(antis$code)
# Join the column codes to the list of data names to get user-friendly variable names
cols <- inner_join(cols, matching, by=c("code" = "Field_ID"))
cols <- separate(cols, col=NewVarName, into=c("TLA", "Specific"), sep="_", convert=TRUE, remove=FALSE, fill="right", extra="merge")
cols$maxmeas <- with(cols, ave(measurement, TLA, FUN=max))
cols$maxinst <- with(cols, ave(instance, TLA, FUN=max))
#--------------------------------------------------------------------------------------------------------------
# Separate baseline measurements from repeated and give human-readable names
basecols <- bd[,c("f.eid",as.vector(cols$full[cols$instlabel=="init"]))]
cols$basecols <- ifelse(cols$maxmeas==0, paste0(cols$NewVarName), paste0(cols$NewVarName, ".", cols$measurement))
names(basecols) <- cols$basecols[match(names(basecols), cols$full)]
colnames(basecols)[1] <- "ID"
repcols <- bd[,c("f.eid", as.vector(cols$full[cols$instlabel %in% c("rep1", "img", "irep1")]))]
cols$repcols <- ifelse(cols$maxmeas==0, paste0(cols$NewVarName, ".", cols$instlabel), paste0(cols$NewVarName, ".", cols$instlabel, ".", cols$measurement))
names(repcols) <- cols$repcols[match(names(repcols), cols$full)]
colnames(repcols)[1] <- "ID"
othercols <- bd[,c("f.eid", as.vector(cols$full[cols$instlabel %in% c("0", "1")]))]
cols$othercols <- ifelse(cols$maxmeas==0,
ifelse(cols$maxinst==0, paste0(cols$NewVarName), paste0(cols$NewVarName, ".i", cols$instance)),
ifelse(cols$maxinst==0, paste0(cols$NewVarName, ".m", cols$measurement), paste0(cols$NewVarName, ".m", cols$measurement, ".i", cols$instance)))
names(othercols) <- cols$othercols[match(names(othercols), cols$full)]
colnames(othercols)[1] <- "ID"
#--------------------------------------------------------------------------------------------------------------
# Split into separate dataframes by TLA
TLA <- unique(cols[,c("TLA", "instlabel")])
tablelist <- c()
for (row in 1:nrow(TLA)) {
prefix <- TLA$TLA[row]
instlabel <- TLA$instlabel[row]
if (instlabel=="init") { # Baseline measurements
tabname <- paste0(prefix, "_base")
assign(tabname, basecols[,c(1, grep(pattern=prefix, x=colnames(basecols), fixed=TRUE))])
tablelist <- c(tablelist, tabname)
print(tabname)
} else if (instlabel == "0"){ # Other measurements
# Since filtering on the TLA, only need to create a dataframe for the 0 not the 1 as both tables would be the same
tabname <- paste0(prefix)
temptab <- othercols[,c(1, grep(pattern=prefix, x=colnames(othercols), fixed=TRUE))]
# temptab <- reshape(temptab, varying=sort(colnames(temptab[,-1])), direction="long", idvar="ID", sep=".i")
assign(tabname, temptab)
tablelist <- c(tablelist, tabname)
print(tabname)
} # Ignore repeated measures for now
}
#--------------------------------------------------------------------------------------------------------------
# Make these into SQLite tables
df_to_table <- function(tablist, overwrite) {
conn <- dbConnect(RSQLite::SQLite(), "K:/TEU/APOE on Dementia/Data Management/UKB.db")
for (table in tablist) {
print(table)
df <- eval(as.name(table))
filename <- paste0("K:\\TEU\\APOE on Dementia\\Data Management\\R_Dataframes_TLA\\38358\\", table, ".rds")
if (file.exists(filename)){
print("Already exists")
temp <- readRDS(filename)
newcols <- setdiff(colnames(df), colnames(temp))
print(newcols)
if (length(newcols>0)) {
print("Adding new data")
df <- merge(temp, df[,c("ID", newcols)], by="ID", all=TRUE)
saveRDS(df, file=filename)
}
} else {
print("Saving table")
saveRDS(df, file=filename)
}
# tryCatch({dbWriteTable(conn, table, df, overwrite=overwrite)},
#          error=function(e) {dbWriteTable(conn, paste0(table, "_Neo"), eval(as.name(table)), overwrite=TRUE)})
}
dbDisconnect(conn)
}
df_to_table(tablist=tablelist, overwrite=FALSE)
install.packages("stats")
install.packages("stats")
library(stats)
source("K:/TEU/APOE on Dementia/Statistical Analysis/JCfunctions.R")
